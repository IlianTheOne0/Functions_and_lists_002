# Generated by Qodo Gen
from func import main
import unittest.mock
import io

class TestMain(unittest.TestCase):

    # User inputs a valid integer and the program correctly calculates the number of digits
    def test_valid_integer_input(self):
        with unittest.mock.patch('builtins.input', return_value='12345'):
            with unittest.mock.patch('builtins.print') as mock_print:
                main()
                mock_print.assert_called_with('The number of digits in a number:', 5)

    # User inputs a negative integer and the program calculates the number of digits correctly
    def test_negative_integer_input(self):
        with unittest.mock.patch('builtins.input', return_value='-6789'):
            with unittest.mock.patch('builtins.print') as mock_print:
                main()
                mock_print.assert_called_with('The number of digits in a number:', 4)

    # User inputs zero and the program handles it without errors
    def test_zero_input(self):
        with unittest.mock.patch('builtins.input', return_value='0'):
            with unittest.mock.patch('builtins.print') as mock_print:
                main()
                mock_print.assert_called_with('The number of digits in a number:', 1)

    # The program successfully prints the number of digits for a positive integer
    def test_positive_integer(self):
        with unittest.mock.patch('builtins.input', side_effect=['123']):
            with unittest.mock.patch('sys.stdout', new_callable=io.StringIO) as mock_stdout:
                main()
                self.assertEqual(mock_stdout.getvalue().strip(), 'The number of digits in a number: 3')

    # User inputs a very large integer and the program processes it without performance issues
    def test_large_integer_input(self):
        # Simulate user input of a very large integer
        with unittest.mock.patch('builtins.input', return_value='9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'):
            with unittest.mock.patch('sys.stdout', new_callable=io.StringIO) as mock_stdout:
                main()
                output = mock_stdout.getvalue().strip()
                self.assertEqual(output, 'The number of digits in a number: 100')