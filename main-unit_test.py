# Generated by Qodo Gen
from func import main
import unittest.mock

class TestMain(unittest.TestCase):

    # User inputs a valid integer and the program checks if it's a palindrome
    def test_valid_integer_palindrome(self):
        with unittest.mock.patch('builtins.input', return_value='121'):
            with unittest.mock.patch('builtins.print') as mock_print:
                main()
                mock_print.assert_called_with('Is this number a palindrome?:', True)

    # User inputs a non-integer value, triggering an exception
    def test_non_integer_input_exception(self):
        with unittest.mock.patch('builtins.input', side_effect=['abc', '123']):
            with unittest.mock.patch('builtins.print') as mock_print:
                main()
                mock_print.assert_any_call('Error: invalid literal for int() with base 10: \'abc\'')

    # User inputs zero and the program correctly identifies it as a palindrome
    def test_zero_input_palindrome(self):
        with unittest.mock.patch('builtins.input', return_value='0'):
            with unittest.mock.patch('builtins.print') as mock_print:
                main()
                mock_print.assert_called_with('Is this number a palindrome?:', True)